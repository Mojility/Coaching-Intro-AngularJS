###############################################################################
#
# Code snippets for Intro to Angular
#
###############################################################################





=======
STAGE 1
=======

--

"devDependencies": {
  "angular-mocks": "~1",
  "karma": "^0.12.16",
  "karma-chrome-launcher": "^0.1.4",
  "karma-jasmine": "^0.1.5"
}

--

var app = angular.module("main", []);

app.filter('phoneFormatter', function () {
    return function (input) {
        return input;
    };
});

--

describe("main", function () {

    beforeEach(module("main"));

    describe("phoneFormatter", function () {

        var filter;

        beforeEach(inject(function ($filter) {
            filter = $filter('phoneFormatter');
        }));

        it("should present a properly formatted phone number", function () {
            var formattedPhone = filter('+19055551212', 'phoneFormatter');
            expect(formattedPhone).toEqual("(905) 555-1212");
        });

    });

});

--

E.164 phone number regex
.replace(/\+\d(\d{3})(\d{3})(\d{4})/, '($1) $2-$3')

--

{{ "+14165551212" | phoneFormatter}}

--

var groupsList = [
  {
      id: 0,
      phone: '+19055551212',
      name: 'Oshawa',
      secret: '905sec',
      call_handler: 'reject_busy',
      open: true,
      mode: 'broadcast',
      welcome_message: "Send #callme to set your handle, #cancel to leave any time, #info for group information.",
      goodbye_message: "Sorry to see you go. Join again if you want by sending another text.",
      info_message: "This is just a TEST group, nothing really to see here.",
      response_message: "If this is an emergency, please call 911.",
      reject_message: "Contact your team lead to be added to the group."
  },
  {
      id: 1,
      phone: '+14165551212',
      name: 'Toronto',
      secret: '416sec',
      call_handler: 'reject_busy',
      open: true,
      mode: 'broadcast',
      welcome_message: "Send #callme to set your handle, #cancel to leave any time, #info for group information.",
      goodbye_message: "Sorry to see you go. Join again if you want by sending another text.",
      info_message: "This is just a TEST group, nothing really to see here.",
      response_message: "If this is an emergency, please call 911.",
      reject_message: "Contact your team lead to be added to the group."
  },
  {
      id: 2,
      phone: '+17055551212',
      name: 'Peterborough',
      secret: '705sec',
      call_handler: 'reject_busy',
      open: true,
      mode: 'broadcast',
      welcome_message: "Send #callme to set your handle, #cancel to leave any time, #info for group information.",
      goodbye_message: "Sorry to see you go. Join again if you want by sending another text.",
      info_message: "This is just a TEST group, nothing really to see here.",
      response_message: "If this is an emergency, please call 911.",
      reject_message: "Contact your team lead to be added to the group."
  }
];

--

app.controller("MainController", function () {
});

--

<body ng-controller="MainController as main">
    <h1>Primr Groups</h1>
    <table>
        <thead>
            <th>Group</th>
            <th>Phone</th>
        </thead>
        <tbody>
            <tr ng-repeat="group in main.groups">
                <td>{{group.name}}</td>
                <td>{{group.phone | phoneFormatter}}</td>
            </tr>
        </tbody>
    </table>
</body>





=======
STAGE 2
=======



Controller $http
----------------

$http.get('data/groups.json').success(function (data) {
    angular.forEach(data, function (group) {
        this.groups.push(group);
    }.bind(this));
}.bind(this));

Groups Data service
-------------------

var primrServices = angular.module("myServices", []);

primrServices.factory('groupsDataService', ['$http', function ($http) {
    return {
        retrieveGroups: function () {
            loadGroupsPromise = $http.get('data/groups.json').then(function (response) {
                return response.data;
            });
            return loadGroupsPromise;
        },
        findGroup: function (groupId) {
            findGroupPromise = this.retrieveGroups().then(function (groups) {
                var found;
                angular.forEach(groups, function (group) {
                    if (group.id == groupId) found = group;
                });
                return found;
            });
            return findGroupPromise;
        }
    };
}]);





Routing config in main.js
-------------------------

app.config(['$routeProvider',
  function ($routeProvider) {
    $routeProvider.
      when('/groups', {
          templateUrl: 'App/Partials/group-list.html',
          controller: 'MainController',
          controllerAs: 'main'
      }).
      otherwise({
          redirectTo: '/groups'
      });
}]);


Add details controller
----------------------

app.controller("GroupDetailsController", function ($routeParams) {
    this.groupId = $routeParams.groupId
});


Add detail route to main.js
---------------------------

when('/groups', {
    templateUrl: 'App/Partials/group-details.html',
    controller: 'GroupDetailsController',
    controllerAs: 'groupDetailsCtrl'
}).



=======
STAGE 4 - SERVICES
=======



Start blank primrServices module
--------------------------------

(function () {

    var primrServices = angular.module("primrServices", []);

})();

Service
-------
primrServices.factory('groupsDataService', [ '$http', function ($http) {
    return {
        retrieveGroups: function () {
            loadGroupsPromise = $http.get('data/groups.json').then(function (response) {
                return response.data;
            });
            return loadGroupsPromise;
        },
        findGroup: function (groupId) {
            findGroupPromise = this.retrieveGroups().then(function (groups) {
                var found;
                angular.forEach(groups, function (group) {
                    if (group.id == groupId) found = group;
                });
                return found;
            });
            return findGroupPromise;
        }
    };
}]);



Filling Out Group Form (Tabs)
-----------------------------
<h1>{{group.name}} - {{group.phone | phoneFormatter}}</h1>

<form>
    <div class="form-group">
        <label for="name">Name</label>
        <input type="text" class="form-control" placeholder="Group Name" ng-model="group.name">
    </div>

    <div class="panel">
        <div class="checkbox">
            <label>
                <input type="checkbox" ng-model="group.open" /> Open for new members
            </label>
        </div>
        <div class="form-group">
            <label for="call_handler">Voice Calls</label>
            <select class="form-control" ng-model="group.call_handler">
                <option value="reject_busy">Reject with busy signal</option>
            </select>
        </div>
        <div class="form-group">
            <label>Group Mode</label>
            <div class="radio">
                <label>
                    <input type="radio" name="groupModes" ng-model="group.mode" value="chat" />
                    Chat - everyone sees all messages
                </label>
            </div>
            <div class="radio">
                <label>
                    <input type="radio" name="groupModes" ng-model="group.mode" value="broadcast" />
                    Broadcast - group announcements and queries
                </label>
            </div>
        </div>
    </div>

    <div class="panel">
        <div class="form-group">
            <label for="welcome_message">When new member joins group</label>
            <textarea rows="2" class="form-control" ng-model="group.welcome_message"></textarea>
        </div>
        <div class="form-group">
            <label for="goodbye_message">When member leaves group (#cancel)</label>
            <textarea rows="2" class="form-control" ng-model="group.goodbye_message"></textarea>
        </div>
        <div class="form-group">
            <label for="info_message">When member requests group info (#info)</label>
            <textarea rows="2" class="form-control" ng-model="group.info_message"></textarea>
        </div>
        <div class="form-group">
            <label for="response_message">When group is in broadcast mode and member texts group</label>
            <textarea rows="2" class="form-control" ng-model="group.response_message"></textarea>
        </div>
        <div class="form-group">
            <label for="reject_message">When group is closed and a non-member tries to join</label>
            <textarea rows="2" class="form-control" ng-model="group.reject_message"></textarea>
        </div>
    </div>
</form>

Tabs Snippet
------------
<ul class="nav nav-tabs">
    <li><a>Behaviour</a></li>
    <li><a>Messages</a></li>
</ul>

ng-class="{active: tab === 1}"




UNIT TEST FOR TABS CONTROLLER
-----------------------------
/// <reference path="../Scripts/jasmine.js" />
/// <reference path="../Scripts/angular.js" />
/// <reference path="../Scripts/angular-mocks.js" />

/// <reference path="../App/services.js" />
/// <reference path="../App/controllers.js" />

describe("main", function () {

    beforeEach(module("primrControllers"));

    describe("TabPanelController", function () {

        var controller;

        beforeEach(inject(function ($rootScope, $controller) {
            controller = $controller('TabPanelController', { '$scope': $rootScope.$new() });
        }));

        it("should evaluate true to truthy", function () {
            expect(true).toBeTruthy();
        });

    });

});





Controller
----------
groupsDataService.retrieveGroups().then(function (data) {
    this.groups = data;
}.bind(this));


Boilerplate Controller Test

/// <reference path="../Scripts/jasmine.js" />
/// <reference path="../Scripts/angular.js" />
/// <reference path="../Scripts/angular-mocks.js" />

/// <reference path="../App/main.js" />

describe("main", function () {

    beforeEach(module("main"));

    describe("MainController", function () {

        var controller;

        beforeEach(inject(function ($rootScope, $controller) {
            controller = $controller('MainController');
        }));

        it("should have a list of group phone numbers", function () {
            expect(controller.groups.length).toEqual(3);
        });

    });

});
